package main

import (
	"encoding/json"
	"fmt"
	"os"
	"strings"
	"time"
)

// ConversationalEntry represents a single conversational Q&A pair for LLMs
type ConversationalEntry struct {
	ID           string                 `json:"id"`
	Conversation []ConversationalTurn   `json:"conversation"`
	Metadata     map[string]interface{} `json:"metadata"`
	Source       ConversationalSource   `json:"source"`
	CreatedAt    string                 `json:"created_at"`
}

type ConversationalTurn struct {
	Role    string `json:"role"`
	Content string `json:"content"`
}

type ConversationalSource struct {
	URL         string `json:"url"`
	Title       string `json:"title"`
	Category    string `json:"category"`
	Description string `json:"description"`
	WordCount   int    `json:"word_count"`
	Quality     string `json:"quality_tier"`
}

type ConversationalDataset struct {
	Dataset     []ConversationalEntry `json:"dataset"`
	Metadata    DatasetMetadata       `json:"metadata"`
	GeneratedAt string                `json:"generated_at"`
}

type DatasetMetadata struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	Version     string `json:"version"`
	TotalItems  int    `json:"total_items"`
	Sources     string `json:"sources"`
	Purpose     string `json:"purpose"`
}

func main() {
	fmt.Println("üîó GOLANG CONVERSATIONAL DATASET MERGER")
	fmt.Println("=======================================")
	fmt.Println("Combining official golang.org and ethical web content into comprehensive dataset")
	fmt.Println()

	// Load first dataset (golang.org official docs)
	fmt.Println("üìö Loading golang.org conversational dataset...")
	dataset1, err := loadDataset("golang_conversational_dataset.json")
	if err != nil {
		fmt.Printf("‚ùå Failed to load golang.org dataset: %v\n", err)
		return
	}
	fmt.Printf("‚úÖ Loaded %d conversations from golang.org docs\n", len(dataset1.Dataset))

	// Load second dataset (ethical web scraping)
	fmt.Println("\nüåê Loading web-scraped conversational dataset...")
	dataset2, err := loadDataset("go_web_conversational_dataset.json")
	if err != nil {
		fmt.Printf("‚ùå Failed to load web dataset: %v\n", err)
		return
	}
	fmt.Printf("‚úÖ Loaded %d conversations from web sources\n", len(dataset2.Dataset))

	// Merge datasets
	fmt.Println("\nüîó Merging datasets...")
	mergedDataset := mergeDatasets(dataset1, dataset2)

	// Export comprehensive dataset
	outputFile := "comprehensive_go_conversational_dataset.json"
	fmt.Printf("\nüíæ Exporting comprehensive dataset to %s...\n", outputFile)
	
	if err := exportDataset(mergedDataset, outputFile); err != nil {
		fmt.Printf("‚ùå Failed to export: %v\n", err)
		return
	}

	generateMergedSummary(mergedDataset, outputFile)
}

func loadDataset(filename string) (ConversationalDataset, error) {
	var dataset ConversationalDataset
	
	file, err := os.Open(filename)
	if err != nil {
		return dataset, fmt.Errorf("failed to open file: %w", err)
	}
	defer file.Close()

	decoder := json.NewDecoder(file)
	if err := decoder.Decode(&dataset); err != nil {
		return dataset, fmt.Errorf("failed to decode JSON: %w", err)
	}

	return dataset, nil
}

func mergeDatasets(dataset1, dataset2 ConversationalDataset) ConversationalDataset {
	// Combine all conversations
	allConversations := append(dataset1.Dataset, dataset2.Dataset...)

	return ConversationalDataset{
		Dataset: allConversations,
		Metadata: DatasetMetadata{
			Name:        "Comprehensive Go Programming Conversational Dataset",
			Description: "Complete conversational Q&A dataset combining official golang.org documentation and ethically scraped web content for comprehensive Go programming assistance",
			Version:     "2.0.0",
			TotalItems:  len(allConversations),
			Sources:     "Official golang.org documentation + Ethically scraped Go community content (Go Wiki, FAQ, Memory Model, Code Walks)",
			Purpose:     "Comprehensive LLM training, fine-tuning, and production-ready Go programming conversational AI",
		},
		GeneratedAt: time.Now().UTC().Format(time.RFC3339),
	}
}

func exportDataset(dataset ConversationalDataset, filename string) error {
	file, err := os.Create(filename)
	if err != nil {
		return fmt.Errorf("failed to create file: %w", err)
	}
	defer file.Close()

	encoder := json.NewEncoder(file)
	encoder.SetIndent("", "  ")

	if err := encoder.Encode(dataset); err != nil {
		return fmt.Errorf("failed to encode JSON: %w", err)
	}

	return nil
}

func generateMergedSummary(dataset ConversationalDataset, filename string) {
	fmt.Printf("\nüéâ COMPREHENSIVE DATASET CREATED!\n")
	fmt.Printf("=================================\n")
	
	// File size
	if info, err := os.Stat(filename); err == nil {
		fmt.Printf("‚Ä¢ File: %s (%.1f KB)\n", filename, float64(info.Size())/1024)
	}
	
	fmt.Printf("‚Ä¢ Total Conversations: %d\n", len(dataset.Dataset))
	fmt.Printf("‚Ä¢ Dataset Version: %s\n", dataset.Metadata.Version)
	fmt.Printf("‚Ä¢ Generated: %s\n", dataset.GeneratedAt)

	// Analyze content
	typeCount := make(map[string]int)
	sourceCount := make(map[string]int)
	categoryCount := make(map[string]int)
	totalTurns := 0
	totalChars := 0
	totalWords := 0

	for _, entry := range dataset.Dataset {
		// Count by conversation type
		if entryType, ok := entry.Metadata["type"].(string); ok {
			typeCount[entryType]++
		}

		// Count by source category
		categoryCount[entry.Source.Category]++
		
		// Count by source type (official vs web)
		if entry.Source.URL != "" {
			if strings.Contains(entry.Source.URL, "golang.org") {
				sourceCount["Official golang.org"]++
			} else {
				sourceCount["Community Web Sources"]++
			}
		}

		totalTurns += len(entry.Conversation)
		totalWords += entry.Source.WordCount

		for _, turn := range entry.Conversation {
			totalChars += len(turn.Content)
		}
	}

	fmt.Printf("\nüìä Conversation Types:\n")
	for convType, count := range typeCount {
		fmt.Printf("   ‚Ä¢ %s: %d conversations\n", convType, count)
	}

	fmt.Printf("\nüìö Content Categories:\n")
	for category, count := range categoryCount {
		fmt.Printf("   ‚Ä¢ %s: %d conversations\n", category, count)
	}

	fmt.Printf("\nüåê Source Distribution:\n")
	for source, count := range sourceCount {
		fmt.Printf("   ‚Ä¢ %s: %d conversations\n", source, count)
	}

	fmt.Printf("\nüí¨ Comprehensive Dataset Statistics:\n")
	fmt.Printf("   ‚Ä¢ Total Conversational Turns: %d\n", totalTurns)
	fmt.Printf("   ‚Ä¢ Total Characters: %d (%.1f KB)\n", totalChars, float64(totalChars)/1024)
	fmt.Printf("   ‚Ä¢ Total Source Words: %d\n", totalWords)
	fmt.Printf("   ‚Ä¢ Average Conversation Length: %.0f characters\n", float64(totalChars)/float64(len(dataset.Dataset)))
	fmt.Printf("   ‚Ä¢ Average Words per Source: %.0f words\n", float64(totalWords)/float64(len(dataset.Dataset)))

	fmt.Printf("\nüéØ Dataset Capabilities:\n")
	fmt.Printf("   ‚Ä¢ ‚úÖ Official Go documentation expertise\n")
	fmt.Printf("   ‚Ä¢ ‚úÖ Community knowledge and best practices\n")
	fmt.Printf("   ‚Ä¢ ‚úÖ Code examples and practical applications\n")
	fmt.Printf("   ‚Ä¢ ‚úÖ FAQ and troubleshooting guidance\n")
	fmt.Printf("   ‚Ä¢ ‚úÖ Advanced topics (memory model, concurrency)\n")
	fmt.Printf("   ‚Ä¢ ‚úÖ Multiple conversation styles and depths\n")

	fmt.Printf("\nüöÄ Ready for Advanced LLM Applications:\n")
	fmt.Printf("   ‚Ä¢ Production Go programming assistants\n")
	fmt.Printf("   ‚Ä¢ Comprehensive Go ecosystem chatbots\n")
	fmt.Printf("   ‚Ä¢ Multi-modal Go education platforms\n")
	fmt.Printf("   ‚Ä¢ Code generation and review systems\n")
	fmt.Printf("   ‚Ä¢ Go community knowledge bases\n")

	fmt.Printf("\nüìà Quality Metrics:\n")
	fmt.Printf("   ‚Ä¢ Ethically sourced content with robots.txt compliance\n")
	fmt.Printf("   ‚Ä¢ Quality validated with scoring system\n")
	fmt.Printf("   ‚Ä¢ Diverse conversation types for robust training\n")
	fmt.Printf("   ‚Ä¢ Official + community perspectives for completeness\n")

	fmt.Printf("\nüî¨ Technical Specifications:\n")
	fmt.Printf("   ‚Ä¢ Format: JSON with structured conversation pairs\n")
	fmt.Printf("   ‚Ä¢ Schema: OpenAI/Anthropic compatible conversation format\n")  
	fmt.Printf("   ‚Ä¢ Metadata: Rich source and quality information\n")
	fmt.Printf("   ‚Ä¢ Encoding: UTF-8 with proper escaping\n")
	fmt.Printf("   ‚Ä¢ Ready for: Fine-tuning, RAG, and direct training\n")
}